buildscript {
    ext {
        springBootVersion = '2.6.2'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'application'

group 'jp.co.jeus'
version '1.0'

repositories {
    mavenCentral()
}
configurations {
    all {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
    }
}
dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web:2.6.2'
    implementation 'org.springframework.boot:spring-boot-starter-mustache:2.6.2'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc:2.6.2'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.6.2'
    implementation 'org.springframework.boot:spring-boot-starter-log4j2:2.6.2'
    implementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    implementation 'org.projectlombok:lombok:1.18.22'
    implementation 'org.mariadb.jdbc:mariadb-java-client:2.7.4'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.10.3'
    implementation 'junit:junit:4.13.1'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.6.2'
    testImplementation 'org.springframework.security:spring-security-test:5.5.3'
}

test {
    useJUnitPlatform()
}
def defaultEncoding = 'UTF-8'
tasks.withType(AbstractCompile)*.options*.encoding = defaultEncoding
tasks.withType(GroovyCompile)*.groovyOptions*.encoding = defaultEncoding

javadoc {
    options.charSet = 'UTF-8'
    options.encoding = 'UTF-8'
}

defaultTasks 'copyEnvironmentConfig', 'build'
// Java character code encode
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
task copyEnvironmentConfig(type: Copy) {
    if (project.hasProperty('env')) {
        println "use ${env} environment"
        from "build/resources/main/env/${env}"
        into "build/resources/main"
    } else {
        println "use default environment"
        from "build/resources/main/env/local"
        into "build/resources/main"
    }
}

jar.dependsOn copyEnvironmentConfig